syntax = "proto3";

enum Network {
  Unknown = 0;

  RawTCP = 1 [deprecated=true];
  TCP = 2;
  UDP = 3;
}

// NetworkList is a list of Networks.
message NetworkList {
  repeated Network network = 1;
}

// PortRange represents a range of ports.
message PortRange {
  // The port that this range starts from.
  uint32 From = 1;
  // The port that this range ends with (inclusive).
  uint32 To = 2;
}


// Domain for routing decision. 
message Domain {
  // Type of domain value.
  enum Type {
    // The value is used as is.
    Plain = 0;
    // The value is used as a regular expression.
    Regex = 1;
    // The value is a domain.
    Domain = 2;
  }

  // Domain matching type.
  Type type = 1;

  // Domain value.
  string value = 2;
}

// IP for routing decision, in CIDR form.
message CIDR {
  // IP address, should be either 4 or 16 bytes.
  bytes ip = 1;

  // Number of leading ones in the network mask.
  uint32 prefix = 2;
}

message GeoIP {
  string country_code = 1;
  repeated CIDR cidr = 2;
}

message GeoIPList {
  repeated GeoIP entry = 1;
}

message GeoSite {
  string country_code = 1;
  repeated Domain domain = 2;
}

message GeoSiteList{
  repeated GeoSite entry = 1;
}

message RoutingRule {
  string tag = 1;
  repeated Domain domain = 2;
  repeated CIDR cidr = 3;
  PortRange port_range = 4;
  NetworkList network_list = 5;
  repeated CIDR source_cidr = 6;
  repeated string user_email = 7;
  repeated string inbound_tag = 8;
}

message Config {
  enum DomainStrategy {
    // Use domain as is.
    AsIs = 0;

    // Always resolve IP for domains.
    UseIp = 1;

    // Resolve to IP if the domain doesn't match any rules.
    IpIfNonMatch = 2;

    // Resolve to IP if any rule requires IP matching.
    IpOnDemand = 3;
  }
  DomainStrategy domain_strategy = 1;
  repeated RoutingRule rule = 2;
}
